name: Build Client Executable

on:
  push:
    branches: [main]
    paths:
      - 'client.py'

permissions:
  contents: write
jobs:
  build-client:
    runs-on: windows-latest # <-- Hier wurde von ubuntu-latest auf windows-latest geändert
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Ensure requirements.txt exists
        # Für Windows (PowerShell als Standard-Shell) ist "Test-Path" die Entsprechung von "-f" oder "not exist".
        # Alternativ können wir bash als Shell für diesen Schritt beibehalten und die bash-Syntax verwenden.
        # Ich belasse es bei PowerShell, da es die Standard-Shell unter Windows ist.
        run: |
          if (-Not (Test-Path requirements.txt)) {
            New-Item -Path requirements.txt -ItemType File -Value ""
          }
        shell: pwsh # <-- Explizite Verwendung von PowerShell

      - name: Install build dependencies
        run: pip install --upgrade pip wheel setuptools

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build client executable
        run: |
          pip install pyinstaller
          # Auf Windows funktioniert das Icon direkt
          pyinstaller --noconsole --onefile --icon=icon.ico client.py || pyinstaller --noconsole --onefile client.py

      - name: Create executables directory
        # Für Windows (PowerShell) verwenden wir Test-Path -PathType Container für Verzeichnisse
        run: |
          if (-Not (Test-Path -PathType Container executables)) {
            mkdir executables
          }
        shell: pwsh # <-- Explizite Verwendung von PowerShell

      - name: Move executable to executables folder (Windows)
        run: |
          # Der Befehl 'move' funktioniert in PowerShell und CMD
          move dist\client.exe executables\client-windows.exe
        shell: pwsh # <-- Explizite Verwendung von PowerShell

      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-executable-windows
          path: executables/*

      - name: Commit and push executables to main branch
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Git-Befehle funktionieren gut mit bash auf Windows, daher belassen wir es hier.
        shell: bash
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git fetch origin main
          git checkout main
          git pull origin main
          git add executables/*
          # Check if there are actual changes before committing
          git diff --cached --quiet || git commit -m "Update executables [skip ci]"
          git push origin main